package gui;

import control.DAOHoaDon;
import control.DAOKhachHang;
import control.DAOKhuyenMai;
import control.DAOVe;
import entity.HoaDon;
import entity.KhachHang;
import entity.NhanVien;
import entity.Ve;
import enums.EChucVu;
import enums.EColor;
import gui.components.DatePicker;
import gui.custom.CButton;
import gui.custom.CTable;
import gui.custom.CTextField;
import org.jdatepicker.impl.JDatePickerImpl;
import utils.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * @Dự án: tau-viet-express
 * @Class: PnlKhachHang2
 * @Tạo vào ngày: 12/11/2024
 * @Tác giả: Huy
 */
public class PnlKhachHang extends JPanel {
    /**
     * Creates new form PnlKhachHang
     */
    public PnlKhachHang(NhanVien nhanVien) {
        this.nhanVien = nhanVien;

        filterKhachHang = () -> {
            List<RowFilter<Object, Object>> filters = new ArrayList<>();

            // Lọc theo đối tượng
            String doiTuong = cboLocDoiTuong.getSelectedItem().toString();
            if (!doiTuong.equals("Tất cả")) {
                filters.add(RowFilter.regexFilter(doiTuong, 6));
            }

            tableKhachHangSorter.setRowFilter(RowFilter.andFilter(filters));
        };

        initComponents();
        readDataFromDb();

        datePickerNgaySinh.requestFocus();
    }

    private void readDataFromDb() {
        listDoiTuong = DAOKhuyenMai.getDSDoiTuongKhuyenMai();
        listDoiTuong.forEach(cboDoiTuong::addItem);
        listDoiTuong.forEach(cboLocDoiTuong::addItem);

        cboDoiTuong.setSelectedItem("Tất cả");
        cboLocDoiTuong.setSelectedItem("Tất cả");

        listKhachHang = DAOKhachHang.layDanhSachKhachHang();
        listKhachHang.forEach(khachHang -> {
            System.out.println("khach hagn: " + khachHang);
            tblModelKhachHang.addRow(new Object[]{
                    khachHang.getMaKH(),
                    khachHang.getTenKH(),
                    khachHang.getCCCD(),
                    khachHang.getSdt(),
                    khachHang.getEmail(),
                    FormatDate.formatLocalDateToDMY(khachHang.getNgaySinh()),
                    khachHang.getDoiTuong()
            });
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pnlTop = new JPanel();
        lblTitle = new JLabel();
        pnlLeft = new JPanel();
        pnlLeftTop = new JPanel();
        boxMaKH = new JPanel();
        lblMaKhach = new JLabel();
        txtMaKH = new CTextField();
        filler1 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxHoTen = new JPanel();
        lblHoTen = new JLabel();
        txtHoTen = new CTextField();
        filler2 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxCccd = new JPanel();
        lblCccd = new JLabel();
        txtCccd = new CTextField();
        filler5 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxSdt = new JPanel();
        lblSdt = new JLabel();
        txtSdt = new CTextField();
        filler6 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxEmail = new JPanel();
        lblEmail = new JLabel();
        txtEmail = new CTextField();
        filler3 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxNgaySinh = new JPanel();
        lblNgaySih = new JLabel();
        datePickerNgaySinh = DatePicker.getDatePicker();
        filler7 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxDoiTuong = new JPanel();
        lblDoiTuong = new JLabel();
        cboDoiTuong = new JComboBox<>();
        filler4 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxChucNang = new JPanel();
        btnCapNhat = new CButton("Cập nhật", CButton.PRIMARY);
        jLayeredPane1 = new JLayeredPane();
        pnlRight = new JPanel();
        pnlRightTop = new JPanel();
        pnlRightBot = new JPanel();
        lblTimKiem = new JLabel();
        filler8 = new Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        txtTimKiem = new CTextField();
        filler9 = new Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        btnTraCuuTheoMa = new CButton("Tra cứu", CButton.PRIMARY);
        filler10 = new Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        lblLocDoiTuong = new JLabel();
        filler12 = new Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        cboLocDoiTuong = new JComboBox<>();
        btnXoaBoLoc = new CButton("Xóa bộ lọc", CButton.SECONDARY);
        scrKhachHang = new JScrollPane();
        tblModelKhachHang = new DefaultTableModel(new Object[]{
                "Mã khách", "Họ tên", "CCCD", "SDT", "Email", "Ngày sinh", "Đối tượng",
        }, 0);
        tblKhachHang = new CTable(tblModelKhachHang);
        tableKhachHangSorter = new TableRowSorter<>(tblModelKhachHang);
        tblKhachHang.setRowSorter(tableKhachHangSorter);
        filler11 = new Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        boxHoaDon = new JPanel();
        pnlHoaDon = new JPanel();
        pnlTitle = new JPanel();
        lblHoaDon = new JLabel();
        scrHoaDon = new JScrollPane();
        tblModelHoaDon = new DefaultTableModel(new Object[]{
                "Mã hóa đơn", "Ngày lập", "Thành tiền",
        }, 0);
        tblHoaDon = new CTable(tblModelHoaDon);
        filler13 = new Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        pnlVe = new JPanel();
        pnlVeTitle = new JPanel();
        lblVe = new JLabel();
        scrVe = new JScrollPane();
        tblModelVe = new DefaultTableModel(new Object[]{
                "Mã vé", "Chỗ ngồi", "Khách hàng", "Thành tiền",
        }, 0);
        tblVe = new CTable(tblModelVe);
        btnInVe = new CButton("In vé", CButton.PRIMARY);
        btnInTatCaVe = new CButton("In tất cả vé", CButton.PRIMARY);
        btnInHoaDon = new CButton("In hóa đơn", CButton.SECONDARY);

        setPreferredSize(new java.awt.Dimension(1920, 800));
        setLayout(new java.awt.BorderLayout());

        pnlTop.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pnlTop.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        pnlTop.setLayout(new java.awt.BorderLayout());
        pnlTop.setBackground(EColor.BG_COLOR.getColor());

        lblTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setText("Quản lý khách hàng");
        pnlTop.add(lblTitle, java.awt.BorderLayout.CENTER);

        add(pnlTop, java.awt.BorderLayout.NORTH);

        pnlLeft.setBorder(BorderFactory.createTitledBorder(null, "Thông tin khách hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N
        pnlLeft.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        pnlLeft.setPreferredSize(new java.awt.Dimension(400, 182));
        pnlLeft.setLayout(new java.awt.BorderLayout());
        pnlLeft.setBackground(EColor.BG_COLOR.getColor());

        pnlLeftTop.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pnlLeftTop.setLayout(new BoxLayout(pnlLeftTop, BoxLayout.Y_AXIS));
        pnlLeftTop.setBackground(EColor.BG_COLOR.getColor());

        boxMaKH.setLayout(new BoxLayout(boxMaKH, BoxLayout.X_AXIS));
        boxMaKH.setBackground(EColor.BG_COLOR.getColor());

        lblMaKhach.setText("Mã khách");
        lblMaKhach.setPreferredSize(new java.awt.Dimension(80, 0));
        boxMaKH.add(lblMaKhach);

        txtMaKH.setPreferredSize(new java.awt.Dimension(200, 30));
        txtMaKH.setEditable(false);
        boxMaKH.add(txtMaKH);

        pnlLeftTop.add(boxMaKH);
        pnlLeftTop.add(filler1);

        boxHoTen.setLayout(new BoxLayout(boxHoTen, BoxLayout.X_AXIS));
        boxHoTen.setBackground(EColor.BG_COLOR.getColor());

        lblHoTen.setText("Họ tên");
        lblHoTen.setPreferredSize(lblMaKhach.getPreferredSize());
        boxHoTen.add(lblHoTen);

        txtHoTen.setPreferredSize(txtMaKH.getPreferredSize());
        boxHoTen.add(txtHoTen);

        pnlLeftTop.add(boxHoTen);
        pnlLeftTop.add(filler2);

        boxCccd.setLayout(new BoxLayout(boxCccd, BoxLayout.X_AXIS));
        boxCccd.setBackground(EColor.BG_COLOR.getColor());

        lblCccd.setText("CCCD");
        lblCccd.setPreferredSize(lblMaKhach.getPreferredSize());
        boxCccd.add(lblCccd);

        txtCccd.setPreferredSize(txtMaKH.getPreferredSize());
        boxCccd.add(txtCccd);

        pnlLeftTop.add(boxCccd);
        pnlLeftTop.add(filler5);

        boxSdt.setLayout(new BoxLayout(boxSdt, BoxLayout.X_AXIS));
        boxSdt.setBackground(EColor.BG_COLOR.getColor());

        lblSdt.setText("SDT");
        lblSdt.setPreferredSize(lblMaKhach.getPreferredSize());
        boxSdt.add(lblSdt);

        txtSdt.setPreferredSize(txtMaKH.getPreferredSize());
        boxSdt.add(txtSdt);

        pnlLeftTop.add(boxSdt);
        pnlLeftTop.add(filler6);

        boxEmail.setLayout(new BoxLayout(boxEmail, BoxLayout.X_AXIS));
        boxEmail.setBackground(EColor.BG_COLOR.getColor());

        lblEmail.setText("Email");
        lblEmail.setPreferredSize(lblMaKhach.getPreferredSize());
        boxEmail.add(lblEmail);
        txtEmail.setPreferredSize(txtMaKH.getPreferredSize());
        boxEmail.add(txtEmail);

        pnlLeftTop.add(boxEmail);
        pnlLeftTop.add(filler3);

        boxNgaySinh.setLayout(new BoxLayout(boxNgaySinh, BoxLayout.X_AXIS));
        boxNgaySinh.setBackground(EColor.BG_COLOR.getColor());

        lblNgaySih.setText("Ngày sinh");
        lblNgaySih.setPreferredSize(new java.awt.Dimension(80, 0));
        boxNgaySinh.add(lblNgaySih);

        datePickerNgaySinh.setPreferredSize(txtMaKH.getPreferredSize());
        boxNgaySinh.add(datePickerNgaySinh);

        pnlLeftTop.add(boxNgaySinh);
        pnlLeftTop.add(filler7);

        boxDoiTuong.setLayout(new BoxLayout(boxDoiTuong, BoxLayout.X_AXIS));
        boxDoiTuong.setBackground(EColor.BG_COLOR.getColor());

        lblDoiTuong.setText("Đối tượng");
        lblDoiTuong.setPreferredSize(lblMaKhach.getPreferredSize());
        boxDoiTuong.add(lblDoiTuong);

        cboDoiTuong.setPreferredSize(txtMaKH.getPreferredSize());
        boxDoiTuong.add(cboDoiTuong);

        pnlLeftTop.add(boxDoiTuong);
        pnlLeftTop.add(filler4);




        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });
        boxChucNang.setBackground(EColor.BG_COLOR.getColor());
        boxChucNang.add(btnCapNhat);

        pnlLeftTop.add(boxChucNang);

        pnlLeft.add(pnlLeftTop, java.awt.BorderLayout.NORTH);
        pnlLeft.add(jLayeredPane1, java.awt.BorderLayout.CENTER);

        add(pnlLeft, java.awt.BorderLayout.LINE_START);

        pnlRight.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        pnlRight.setLayout(new BoxLayout(pnlRight, BoxLayout.Y_AXIS));
        pnlRight.setBackground(EColor.BG_COLOR.getColor());

        pnlRightTop.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        pnlRightTop.setBackground(EColor.BG_COLOR.getColor());

        lblTimKiem.setText("Tìm kiếm");
        pnlRightTop.add(lblTimKiem);
        pnlRightTop.add(filler8);

        txtTimKiem.setPreferredSize(new java.awt.Dimension(200, 30));
        pnlRightTop.add(txtTimKiem);
        pnlRightTop.add(filler9);

        btnTraCuuTheoMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraCuuTheoMaActionPerformed(evt);
            }
        });
        btnTraCuuTheoMa.setPreferredSize(new java.awt.Dimension(100, 30));
        pnlRightTop.add(btnTraCuuTheoMa);
        pnlRightTop.add(filler10);

        lblLocDoiTuong.setText("Đối tượng");
        pnlRightTop.add(lblLocDoiTuong);
        pnlRightTop.add(Box.createHorizontalStrut(10));

        cboLocDoiTuong.setPreferredSize(new java.awt.Dimension(200, 30));
        cboLocDoiTuong.addActionListener(
                new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        filterKhachHang.run();
                    }
                }
        );
        pnlRightTop.add(cboLocDoiTuong);
        pnlRightTop.add(filler12);

        btnXoaBoLoc.setPreferredSize(new java.awt.Dimension(120, 30));
        btnXoaBoLoc.addActionListener(
                new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        resetAll();
                    }
                }
        );
        pnlRightTop.add(btnXoaBoLoc);

        pnlRight.add(pnlRightTop);
        pnlRight.add(Box.createVerticalStrut(10));

        pnlRightBot = new JPanel();
        pnlRightBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        pnlRightBot.setBackground(EColor.BG_COLOR.getColor());

        btnInVe.setPreferredSize(new java.awt.Dimension(100, 30));
        btnInVe.addActionListener(new java.awt.event.ActionListener() {
                                      public void actionPerformed(java.awt.event.ActionEvent evt) {
                                          inVe();
                                      }
                                  });
        pnlRightBot.add(btnInVe);

        btnInTatCaVe.setPreferredSize(new java.awt.Dimension(120, 30));
        btnInTatCaVe
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        inAllVe();
                    }
                });
        pnlRightBot.add(btnInTatCaVe);

        btnInHoaDon.setPreferredSize(new java.awt.Dimension(120, 30));
        btnInHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inHoaDon();
            }
        });
        pnlRightBot.add(btnInHoaDon);


        scrKhachHang.setViewportView(tblKhachHang);
        tblKhachHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tblKhachHang.getSelectedRow();
                if (row >= 0) {
                    LocalDate ngaySinh = FormatDate.formatStrToLocalDate(tblKhachHang.getValueAt(row, 5).toString());

                    txtMaKH.setText(tblKhachHang.getValueAt(row, 0).toString());
                    txtHoTen.setText(tblKhachHang.getValueAt(row, 1).toString());
                    txtCccd.setText(tblKhachHang.getValueAt(row, 2).toString());
                    txtSdt.setText(tblKhachHang.getValueAt(row, 3).toString());
                    txtEmail.setText(tblKhachHang.getValueAt(row, 4).toString());
                    datePickerNgaySinh.getModel().setDate(
                            ngaySinh.getYear(),
                            ngaySinh.getMonthValue() - 1,
                            ngaySinh.getDayOfMonth()
                    );
                    datePickerNgaySinh.getJFormattedTextField().setText(FormatDate.formatLocalDateToDMY(ngaySinh));
                    cboDoiTuong.setSelectedItem(tblKhachHang.getValueAt(row, 6).toString());

                    loadHoaDonCuaKhachHang(tblKhachHang.getValueAt(row, 0).toString());
                }
            }
        });

        pnlRight.add(scrKhachHang);
        pnlRight.add(filler11);

        boxHoaDon.setLayout(new BoxLayout(boxHoaDon, BoxLayout.X_AXIS));
        boxHoaDon.setBackground(EColor.BG_COLOR.getColor());

        pnlHoaDon.setLayout(new BoxLayout(pnlHoaDon, BoxLayout.Y_AXIS));
        pnlHoaDon.setBackground(EColor.BG_COLOR.getColor());

        pnlTitle.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        pnlTitle.setBackground(EColor.BG_COLOR.getColor());

        lblHoaDon.setHorizontalAlignment(SwingConstants.LEFT);
        lblHoaDon.setText("Danh sách hóa đơn");
        pnlTitle.add(lblHoaDon);

        pnlHoaDon.add(pnlTitle);

        scrHoaDon.setViewportView(tblHoaDon);
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tblHoaDon.getSelectedRow();
                if (row >= 0) {
                    loadVeCuaHoaDon(tblHoaDon.getValueAt(row, 0).toString());
                }
            }
        });

        pnlHoaDon.add(scrHoaDon);

        boxHoaDon.add(pnlHoaDon);
        boxHoaDon.add(filler13);

        pnlVe.setLayout(new BoxLayout(pnlVe, BoxLayout.Y_AXIS));
        pnlVe.setBackground(EColor.BG_COLOR.getColor());

        pnlVeTitle.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        pnlVeTitle.setBackground(EColor.BG_COLOR.getColor());

        lblVe.setHorizontalAlignment(SwingConstants.LEFT);
        lblVe.setText("Danh sách vé của hóa đơn");
        pnlVeTitle.add(lblVe);

        pnlVe.add(pnlVeTitle);

        scrVe.setViewportView(tblVe);

        pnlVe.add(scrVe);

        boxHoaDon.add(pnlVe);

        pnlRight.add(boxHoaDon);
        pnlRight.add(pnlRightBot);

        add(pnlRight, java.awt.BorderLayout.CENTER);

        if (nhanVien.getChucVu().getTenCV().equals(EChucVu.NV.getChucVu())) {
            txtMaKH.setEditable(false);
            txtHoTen.setEditable(false);
            txtCccd.setEditable(false);
            txtSdt.setEditable(false);
            txtEmail.setEditable(false);
            datePickerNgaySinh.getComponent(1).setEnabled(false);
            cboDoiTuong.setEnabled(false);
            btnCapNhat.setEnabled(false);
        }
    }// </editor-fold>

    // Reset tất cả thông tin
    private void resetAll() {
        txtMaKH.setText("");
        txtHoTen.setText("");
        txtCccd.setText("");
        txtSdt.setText("");
        txtEmail.setText("");
        datePickerNgaySinh.getModel().setValue(null);
        cboDoiTuong.setSelectedIndex(0);
        cboLocDoiTuong.setSelectedItem("Tất cả");

        tblModelKhachHang.setRowCount(0);
        listKhachHang = DAOKhachHang.layDanhSachKhachHang();
        listKhachHang.forEach(khachHang -> {
            tblModelKhachHang.addRow(new Object[]{
                    khachHang.getMaKH(),
                    khachHang.getTenKH(),
                    khachHang.getCCCD(),
                    khachHang.getSdt(),
                    khachHang.getEmail(),
                    FormatDate.formatLocalDateToDMY(khachHang.getNgaySinh()),
                    khachHang.getDoiTuong()
            });
        });

        tblModelHoaDon.setRowCount(0);
        tblModelVe.setRowCount(0);
    }

    // Kiểm tra thông tin nhập vào
    private boolean validateInput() {
        String maKhach = txtMaKH.getText();
        String hoTen = txtHoTen.getText();
        String cccd = txtCccd.getText();
        String sdt = txtSdt.getText();
        String email = txtEmail.getText();
        String ngaySinhStr = datePickerNgaySinh.getJFormattedTextField().getText();

        if (maKhach.isEmpty() || hoTen.isEmpty() || cccd.isEmpty() || sdt.isEmpty() || email.isEmpty() || ngaySinhStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!Validation.CCCD(cccd)) {
            JOptionPane.showMessageDialog(this, "CCCD không hợp lệ", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!Validation.sdt(sdt)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!Validation.email(email)) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }


        return true;
    }

    // Xử lý sự kiện khi click vào nút cập nhật
    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {
        String maKhach = txtMaKH.getText();
        String hoTen = txtHoTen.getText();
        String cccd = txtCccd.getText();
        String sdt = txtSdt.getText();
        String email = txtEmail.getText();
        String ngaySinhStr = datePickerNgaySinh.getJFormattedTextField().getText();

        System.out.println("ngay sinh: " + ngaySinhStr);
        LocalDate ngaySinh = FormatDate.formatStrToLocalDate(ngaySinhStr);
        String doiTuong = cboDoiTuong.getSelectedItem().toString();

        if (validateInput()) {
            KhachHang khachHang = new KhachHang(maKhach, hoTen, cccd, sdt, email, ngaySinh, doiTuong);
            if (DAOKhachHang.suaKhachHang(khachHang) != null) {
                JOptionPane.showMessageDialog(this, "Cập nhật thành công", "Thành công", JOptionPane.INFORMATION_MESSAGE);

                if (tblKhachHang.getSelectedRow() > -1) {
                    listKhachHang.set(tblKhachHang.getSelectedRow(), khachHang);
                }
                resetAll();
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnTraCuuTheoMaActionPerformed(java.awt.event.ActionEvent evt) {
        String timKiemText = txtTimKiem.getText();
        KhachHang khachHang = null;

        // Kiểm tra nếu là mã khách hàng
        if (Validation.maKH(timKiemText)) {
            khachHang = DAOKhachHang.layKhachHangTheoMa(timKiemText);
        } else if (Validation.CCCD(timKiemText)) {
            khachHang = DAOKhachHang.layKhachHangTheoCCCD(timKiemText);
        } else if (Validation.sdt(timKiemText)) {
            khachHang = DAOKhachHang.layKhachHangTheoSdt(timKiemText);
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã khách hàng, CCCD hoặc SĐT", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (khachHang == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            tblModelKhachHang.setRowCount(0);
            tblModelKhachHang.addRow(new Object[]{
                    khachHang.getMaKH(),
                    khachHang.getTenKH(),
                    khachHang.getCCCD(),
                    khachHang.getSdt(),
                    khachHang.getEmail(),
                    FormatDate.formatLocalDateToDMY(khachHang.getNgaySinh()),
                    khachHang.getDoiTuong()
            });
            tblKhachHang.setRowSelectionInterval(0, 0);

            LocalDate ngaySinh = FormatDate.formatStrToLocalDate(tblKhachHang.getValueAt(0, 5).toString());

            txtMaKH.setText(tblKhachHang.getValueAt(0, 0).toString());
            txtHoTen.setText(tblKhachHang.getValueAt(0, 1).toString());
            txtCccd.setText(tblKhachHang.getValueAt(0, 2).toString());
            txtSdt.setText(tblKhachHang.getValueAt(0, 3).toString());
            txtEmail.setText(tblKhachHang.getValueAt(0, 4).toString());
            datePickerNgaySinh.getModel().setDay(ngaySinh.getDayOfMonth());
            datePickerNgaySinh.getModel().setMonth(ngaySinh.getMonthValue() - 1);
            datePickerNgaySinh.getModel().setYear(ngaySinh.getYear());
            cboDoiTuong.setSelectedItem(tblKhachHang.getValueAt(0, 6).toString());

            loadHoaDonCuaKhachHang(timKiemText);
        }
    }

    private void loadHoaDonCuaKhachHang(String maKhach) {
        tblModelHoaDon.setRowCount(0);
        tblModelVe.setRowCount(0);

        listHoaDon = DAOHoaDon.docHoaDonTheoKhachHang(maKhach);
        listHoaDon.forEach(hoaDon -> {
            tblModelHoaDon.addRow(new Object[]{
                    hoaDon.getMaHD(),
                    FormatDate.formatLocaldatetimeToString(hoaDon.getNgayGioLapHD()),
                    FormatMoney.format(hoaDon.getThanhTien()),
            });
        });

        tblHoaDon.setRowSelectionInterval(0, 0);
        loadVeCuaHoaDon(tblHoaDon.getValueAt(0, 0).toString());
    }

    private void loadVeCuaHoaDon(String maHoaDon) {
        tblModelVe.setRowCount(0);
        listVe = DAOVe.layDSVeTheoMaHD(maHoaDon);
        listVe.forEach(ve -> {
            tblModelVe.addRow(new Object[]{
                    ve.getMaVe(),
                    ve.getChoNgoi().getMaCho() + " - " + ve.getChoNgoi().getLoaiCho().getTenLC(),
                    ve.getKhachHang().getTenKH(),
                    FormatMoney.format(ve.getThanhTien()),
            });
        });
    }

    public void inVe() {
        int[] selectedRows = tblVe.getSelectedRows();
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn vé cần in", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (int selectedRow : selectedRows) {
            String maVe = tblVe.getValueAt(selectedRow, 0).toString();
            Ve ve = DAOVe.layVeTheoMa(maVe);
            if (ve != null) {
                TicketPrinter printer = new TicketPrinter(ve);
            }
        }
    }

    public void inAllVe() {
        int row = tblHoaDon.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn cần in", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String maHoaDon = tblHoaDon.getValueAt(row, 0).toString();
        listVe = DAOVe.layDSVeTheoMaHD(maHoaDon);

        if (listVe.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Hóa đơn không có vé", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        listVe.forEach(ve -> {
            TicketPrinter printer = new TicketPrinter(ve);
        });
    }

    public void inHoaDon() {
        int row = tblHoaDon.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn cần in", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String maHoaDon = tblHoaDon.getValueAt(row, 0).toString();
        HoaDon hoaDon = DAOHoaDon.getHoaDon(maHoaDon);

        if (hoaDon != null) {
            BillPrinter printer = new BillPrinter(hoaDon);
        }
    }

    // Variables declaration - do not modify
    private NhanVien nhanVien;
    private JPanel boxCccd;
    private JPanel boxChucNang;
    private JPanel boxDoiTuong;
    private JPanel boxEmail;
    private JPanel boxHoTen;
    private JPanel boxHoaDon;
    private JPanel boxNgaySinh;
    private JPanel boxSdt;
    private JPanel boxMaKH;
    private CButton btnCapNhat;
    private CButton btnTraCuuTheoMa;
    private JComboBox<String> cboDoiTuong;
    private JComboBox<String> cboLocDoiTuong;
    private Box.Filler filler1;
    private Box.Filler filler10;
    private Box.Filler filler11;
    private Box.Filler filler12;
    private Box.Filler filler13;
    private Box.Filler filler2;
    private Box.Filler filler3;
    private Box.Filler filler4;
    private Box.Filler filler5;
    private Box.Filler filler6;
    private Box.Filler filler7;
    private Box.Filler filler8;
    private Box.Filler filler9;
    private JLayeredPane jLayeredPane1;
    private JScrollPane scrKhachHang;
    private JLabel lblCccd;
    private JLabel lblDoiTuong;
    private JLabel lblEmail;
    private JLabel lblMaKhach;
    private JLabel lblHoTen;
    private JLabel lblHoaDon;
    private JLabel lblLocDoiTuong;
    private JLabel lblNgaySih;
    private JLabel lblSdt;
    private JLabel lblTimKiem;
    private JLabel lblTitle;
    private JLabel lblVe;
    private JPanel pnlHoaDon;
    private JPanel pnlLeft;
    private JPanel pnlLeftTop;
    private JPanel pnlRight;
    private JPanel pnlRightTop;
    private JPanel pnlTitle;
    private JPanel pnlTop;
    private JPanel pnlVe;
    private JPanel pnlVeTitle;
    private JScrollPane scrHoaDon;
    private JScrollPane scrVe;
    private CTable tblKhachHang;
    private DefaultTableModel tblModelKhachHang;
    private CTable tblHoaDon;
    private DefaultTableModel tblModelHoaDon;
    private CTable tblVe;
    private DefaultTableModel tblModelVe;
    private CTextField txtCccd;
    private CTextField txtEmail;
    private CTextField txtHoTen;
    private JDatePickerImpl datePickerNgaySinh;
    private CTextField txtSdt;
    private CTextField txtMaKH;
    private CTextField txtTimKiem;
    private ArrayList<String> listDoiTuong;
    private ArrayList<KhachHang> listKhachHang;
    private ArrayList<HoaDon> listHoaDon;
    private ArrayList<Ve> listVe;
    private TableRowSorter<DefaultTableModel> tableKhachHangSorter;
    private Runnable filterKhachHang;
    private CButton btnXoaBoLoc;
    private CButton btnInVe;
    private CButton btnInHoaDon;
    private JPanel pnlRightBot;
    private CButton btnInTatCaVe;
    // End of variables declaration
}
