/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import control.impl.DAONhanVien;
import entity.CaLam;
import entity.ChucVu;
import entity.NhanVien;
import entity.TaiKhoan;
import enums.EColor;
import gui.components.DatePicker;
import gui.custom.CButton;
import gui.custom.CTable;
import gui.custom.CTextField;
import gui.custom.CImage;
import org.jdatepicker.impl.JDatePickerImpl;
import utils.FormatDate;
import utils.Validation;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.time.LocalDate;
import java.util.ArrayList;

public class PnlNhanVien extends JPanel {
    private ArrayList<NhanVien> listNhanVien;
    private JLabel lblCaLam;
    private JComboBox<String> cbxCaLam;
    private JPanel pnlCaLam;
    private CButton btnReset;
    private NhanVien selectedNhanVien;
    private DAONhanVien daoNhanVien;
    /**
     * Creates new form PnlChuyenTau
     */

    public PnlNhanVien() throws RemoteException {
        daoNhanVien = new DAONhanVien();
        setBackground(EColor.BG_COLOR.getColor());
        initComponents();
        readDataFromDb();
    }

    private void readDataFromDb() throws RemoteException {


        // Đổ dữ liệu khuyến mãi vào bảng
        updateModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pnlTop = new JPanel();
        lblTitle = new JLabel();
        pnlLeft = new JPanel();
        pnlAvatarInput = new JPanel();
        pnlAvartar = new JPanel();
        lblAvatar = new JLabel();
        pnlInput = new JPanel();
        pnlHoTen = new JPanel();
        lblHoTen = new JLabel();
        txtHoTen = new CTextField();
        filler1 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlGioiTinh = new JPanel();
        lblGioiTinh = new JLabel();
        cbxGioiTinh = new JComboBox<>();
        filler2 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlNgaySinh = new JPanel();
        lblNgaySinh = new JLabel();
        txtNgaySinh = DatePicker.getDatePicker();
        filler5 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlNgayVaoLam = new JPanel();
        lblNgayVaoLam = new JLabel();
        txtNgayVaoLam = DatePicker.getDatePicker();
        filler6 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlCCCD = new JPanel();
        lblCCCD = new JLabel();
        txtCCCD = new CTextField();
        filler3 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlSDT = new JPanel();
        lblSDT = new JLabel();
        txtSDT = new CTextField();
        filler7 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlEmail = new JPanel();
        lblEmail = new JLabel();
        txtEmail = new CTextField();
        filler4 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlTrangThai = new JPanel();
        lblTrangThai = new JLabel();
        cbxTrangThai = new JComboBox<>();
        filler10 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlChucVu = new JPanel();
        lblChucVu = new JLabel();
        cbxChucVu = new JComboBox<>();
        filler11 = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        pnlDiaChi = new JPanel();
        lblDiaChi = new JLabel();
        txtDiaChi = new CTextField();
        pnlCaLam = new JPanel();
        lblCaLam = new JLabel();
        cbxCaLam = new JComboBox<>();
        boxChucNang = new JPanel();
        btnThem = new CButton();
        btnCapNhat = new CButton();
        pnlRight = new JPanel();
        scrlTblNhanVien = new JScrollPane();
        tblNhanVien = new CTable();
        pnlRightNorth = new JPanel();
        pnlTraCuu = new JPanel();
        cbxTraCuu = new JComboBox<>();
        txtTimMaNhanVien = new CTextField();
        btnTim = new CButton();
        filler12 = new Box.Filler(new Dimension(0, 10), new Dimension(30, 0), new Dimension(32767, 10));
        pnlFilter = new JPanel();
        lblFilter = new JLabel();
        lblFilterChucVu = new JLabel();
        cbxFilterChucVu = new JComboBox<>();
        lblFilterTrangThai = new JLabel();
        cbxFilterTrangThai = new JComboBox<>();
        btnReset = new CButton();

        setPreferredSize(new Dimension(1920, 800));
        setLayout(new BorderLayout());

        pnlTop.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pnlTop.setFont(new Font("Arial", 1, 12)); // NOI18N
        pnlTop.setLayout(new BorderLayout());

        lblTitle.setFont(new Font("Arial", 1, 16)); // NOI18N
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setText("Quản lý Nhân viên");
        pnlTop.add(lblTitle, BorderLayout.CENTER);

        add(pnlTop, BorderLayout.NORTH);

//        pnlLeft.setBorder(BorderFactory.createTitledBorder(null, "Thông tin Nhân viên", border.TitledBorder.DEFAULT_JUSTIFICATION, border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N
        pnlLeft.setBorder(BorderFactory.createTitledBorder(null, "Thông tin Nhân viên", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Arial", 0, 12))); // NOI18N
        pnlLeft.setFont(new Font("Arial", 1, 12)); // NOI18N
        pnlLeft.setPreferredSize(new Dimension(500, 800));
        pnlLeft.setLayout(new BorderLayout());

        pnlAvatarInput.setLayout(new BorderLayout());

        pnlAvartar.setPreferredSize(new Dimension(150, 200));
        pnlAvartar.add(lblAvatar);

        pnlAvatarInput.add(pnlAvartar, BorderLayout.NORTH);

        pnlInput.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pnlInput.setLayout(new BoxLayout(pnlInput, BoxLayout.Y_AXIS));

        pnlHoTen.setLayout(new BoxLayout(pnlHoTen, BoxLayout.X_AXIS));

        lblHoTen.setText("Họ và tên:");
        lblHoTen.setPreferredSize(new Dimension(80, 0));
        pnlHoTen.add(lblHoTen);
        pnlHoTen.add(txtHoTen);

        pnlInput.add(pnlHoTen);
        pnlInput.add(filler1);

        pnlGioiTinh.setLayout(new BoxLayout(pnlGioiTinh, BoxLayout.X_AXIS));

        lblGioiTinh.setText("Giới tính");
        lblGioiTinh.setPreferredSize(new Dimension(80, 0));
        pnlGioiTinh.add(lblGioiTinh);

        cbxGioiTinh.setModel(new DefaultComboBoxModel<>(new String[]{"Nam", "Nữ"}));
        pnlGioiTinh.add(cbxGioiTinh);

        pnlInput.add(pnlGioiTinh);
        pnlInput.add(filler2);

        pnlNgaySinh.setLayout(new BoxLayout(pnlNgaySinh, BoxLayout.X_AXIS));

        lblNgaySinh.setText("Ngày sinh");
        lblNgaySinh.setPreferredSize(new Dimension(80, 0));
        pnlNgaySinh.add(lblNgaySinh);
        pnlNgaySinh.add(txtNgaySinh);

        pnlInput.add(pnlNgaySinh);
        pnlInput.add(filler5);

        pnlNgayVaoLam.setLayout(new BoxLayout(pnlNgayVaoLam, BoxLayout.X_AXIS));

        lblNgayVaoLam.setText("Ngày vào làm");
        lblNgayVaoLam.setPreferredSize(new Dimension(80, 0));
        pnlNgayVaoLam.add(lblNgayVaoLam);
        pnlNgayVaoLam.add(txtNgayVaoLam);

        pnlInput.add(pnlNgayVaoLam);
        pnlInput.add(filler6);

        pnlCCCD.setLayout(new BoxLayout(pnlCCCD, BoxLayout.X_AXIS));

        lblCCCD.setText("CCCD");
        lblCCCD.setPreferredSize(new Dimension(80, 0));
        pnlCCCD.add(lblCCCD);
        pnlCCCD.add(txtCCCD);

        pnlInput.add(pnlCCCD);
        pnlInput.add(filler3);

        pnlSDT.setLayout(new BoxLayout(pnlSDT, BoxLayout.X_AXIS));

        lblSDT.setText("Số điện thoại");
        lblSDT.setPreferredSize(new Dimension(80, 0));
        pnlSDT.add(lblSDT);

        pnlSDT.add(txtSDT);

        pnlInput.add(pnlSDT);
        pnlInput.add(filler7);

        pnlEmail.setLayout(new BoxLayout(pnlEmail, BoxLayout.X_AXIS));

        lblEmail.setText("Email");
        lblEmail.setPreferredSize(new Dimension(80, 0));
        pnlEmail.add(lblEmail);

        txtEmail.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        pnlEmail.add(txtEmail);

        pnlInput.add(pnlEmail);
        pnlInput.add(filler4);

        pnlTrangThai.setLayout(new BoxLayout(pnlTrangThai, BoxLayout.X_AXIS));

        lblTrangThai.setText("Trạng thái");
        lblTrangThai.setPreferredSize(new Dimension(80, 0));
        pnlTrangThai.add(lblTrangThai);

        cbxTrangThai.setModel(new DefaultComboBoxModel<>(new String[]{"Làm việc", "Nghỉ làm"}));

        pnlTrangThai.add(cbxTrangThai);

        pnlInput.add(pnlTrangThai);
        pnlInput.add(filler10);

        pnlChucVu.setLayout(new BoxLayout(pnlChucVu, BoxLayout.X_AXIS));

        lblChucVu.setText("Chức vụ");
        lblChucVu.setPreferredSize(new Dimension(80, 0));
        pnlChucVu.add(lblChucVu);

        cbxChucVu.setModel(new DefaultComboBoxModel<>(new String[]{"Nhân viên", "Quản lý"}));


        pnlChucVu.add(cbxChucVu);

        pnlInput.add(pnlChucVu);
        pnlInput.add(filler11);

        pnlDiaChi.setLayout(new BoxLayout(pnlDiaChi, BoxLayout.X_AXIS));

        lblDiaChi.setText("Địa chỉ");
        lblDiaChi.setPreferredSize(new Dimension(80, 0));
        pnlDiaChi.add(lblDiaChi);

        txtDiaChi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtDiaChiActionPerformed(evt);
            }
        });
        pnlDiaChi.add(txtDiaChi);
        pnlCaLam.setLayout(new BoxLayout(pnlCaLam, BoxLayout.X_AXIS));
        lblCaLam.setText("Ca làm");
        lblCaLam.setPreferredSize(new Dimension(80, 0));

        cbxCaLam.setModel(new DefaultComboBoxModel<>(new String[]{"Ca 1", "Ca 2"}));

        pnlCaLam.add(lblCaLam);
        pnlCaLam.add(cbxCaLam);
        pnlInput.add(pnlCaLam);

        pnlAvatarInput.add(pnlInput, BorderLayout.CENTER);

        pnlLeft.add(pnlAvatarInput, BorderLayout.NORTH);

        boxChucNang.setPreferredSize(new Dimension(400, 40));
        btnThem.setText("Thêm");
        // tôi muốn vừa có chữ thêm vừa icon
//        btnThem.setIcon(new ImageScale("images/icons/plus.png"));
        btnThem.setIcon(new CImage("images/icons/plus.png", 20, 20));
        btnThem.setPreferredSize(new Dimension(130, 30));
        btnThem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnThemActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        boxChucNang.add(btnThem);

        btnCapNhat.setText("Cập nhật");
        btnCapNhat.setIcon(new CImage("images/icons/update-nhan-vien.png", 20, 20));
        btnCapNhat.setPreferredSize(new Dimension(130, 30));
        btnCapNhat.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnCapNhatActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        boxChucNang.add(btnCapNhat);


        pnlLeft.add(boxChucNang, BorderLayout.SOUTH);

        add(pnlLeft, BorderLayout.LINE_START);

        pnlRight.setFont(new Font("Arial", 1, 12)); // NOI18N
        pnlRight.setLayout(new BorderLayout());
        Object[] columnsName = {"Mã nhân viên", "Họ tên", "Chức vụ", "Số điện thoại", "Trạng thái"};
        tblModelNhanVien = new DefaultTableModel(columnsName, 0);
        tblNhanVien.setModel(tblModelNhanVien);
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickRow();
            }
        });
        scrlTblNhanVien.setViewportView(tblNhanVien);

        pnlRight.add(scrlTblNhanVien, BorderLayout.CENTER);

        pnlRightNorth.setLayout(new FlowLayout(FlowLayout.LEFT));

        cbxTraCuu.setModel(new DefaultComboBoxModel<>(new String[]{"Tra cứu bằng Mã nhân viên", "Tra cứu bằng Tên Nhân viên", "Tra cứu bằng CCCD", "Tra cứu bằng số điện thoại", " "}));
        pnlTraCuu.add(cbxTraCuu);

        txtTimMaNhanVien.setPreferredSize(new Dimension(130, 27));
        txtTimMaNhanVien.addActionListener(e -> btnTim.doClick());
        pnlTraCuu.add(txtTimMaNhanVien);

        btnTim.setText("Tìm");
        btnTim.setIcon(new CImage("images/icons/search.png", 18, 18));
        btnTim.setPreferredSize(new Dimension(100, 30));

        btnTim.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    btnTimActionPerformed(e);
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
        pnlTraCuu.add(btnTim);

        btnReset.setText("Reset");
        btnReset.setIcon(new CImage("images/icons/reset.png", 18, 18));
        btnReset.setPreferredSize(new Dimension(100, 30));
        btnReset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                txtTimMaNhanVien.setText("");
                try {
                    updateModel();
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
        pnlTraCuu.add(btnReset);


        pnlRightNorth.add(pnlTraCuu);
        pnlRightNorth.add(filler12);

        lblFilter.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
        lblFilter.setText("Lọc theo:");
        pnlFilter.add(lblFilter);

        lblFilterChucVu.setText("Chức vụ");
        pnlFilter.add(lblFilterChucVu);

        cbxFilterChucVu.setModel(new DefaultComboBoxModel<>(new String[]{"Nhân viên", "Quản lý"}));
        cbxFilterChucVu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cbxFilterChucVuActionPerformed(e);
                System.out.println("thay doi chuc vu");
            }
        });
        pnlFilter.add(cbxFilterChucVu);

        lblFilterTrangThai.setText("Trạng thái");
        pnlFilter.add(lblFilterTrangThai);

        cbxFilterTrangThai.setModel(new DefaultComboBoxModel<>(new String[]{"Làm việc", "Nghỉ làm"}));
        cbxFilterTrangThai.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cbxFilterChucVuActionPerformed(e);
                System.out.println("thay doi trang thai");
            }
        });
        pnlFilter.add(cbxFilterTrangThai);

        pnlRightNorth.add(pnlFilter);

        pnlRight.add(pnlRightNorth, BorderLayout.PAGE_START);

        add(pnlRight, BorderLayout.CENTER);
    }// </editor-fold>

    private boolean validateInput() {
        String hoTen = txtHoTen.getText();
        String gioiTinh = cbxGioiTinh.getSelectedItem().toString();
        LocalDate ngaySinh = FormatDate.formatStrToLocalDate(txtNgaySinh.getJFormattedTextField().getText());
        LocalDate ngayVaoLam = FormatDate.formatStrToLocalDate(txtNgayVaoLam.getJFormattedTextField().getText());
        String cccd = txtCCCD.getText();
        String sdt = txtSDT.getText();
        String email = txtEmail.getText();
        String trangThai = cbxTrangThai.getSelectedItem().toString();
        String chucVu = cbxChucVu.getSelectedItem().toString();
        String diaChi = txtDiaChi.getText();
        // check nhap day du

        if (hoTen.isEmpty() || ngayVaoLam == null || cccd.isEmpty() || sdt.isEmpty() || email.isEmpty() || diaChi.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin");
            return false;
        }
        // hay làm các validate sau
        /*MA_TK("^(QL|NV)\\d{9}$"),
    // Mã nhân viên phải có 2 ký tự đầu chức vụ + năm + tháng + ngày vào làm + %03d
    MA_NV("^(QL|NV)\\d{11}$"),
    // Mã khuyến mãi gồm KM+ năm + tháng + ngày + %03d
    MA_KM("^(KM)\\d{11}$"),
    // Mã vé gồm VE + năm + tháng + ngày + %06d
    MA_VE("^(VE)\\d{14}$"),
    // Mã loại vé LV + 1 số
    MA_LV("^(LV)\\d{1}$"),
    // Mã chỗ gồm mã toa ( nhiều ký tự bao gồm số) + 2 số
    MA_CHO("^[A-Z0-9]+\\d{2}$"),
    // Mã toa gồm 2 ký tự đầu + nhiều ký tự bao gồm số + 2 số
    MA_TOA("^[A-Z]{2}[A-Z0-9]+\\d{2}$"),
    // Mã hóa đơn gồm HD + năm + tháng + ngày + %06d
    MA_HD("^(HD)\\d{14}$"),
    // Mã khách hàng gồm KH + năm + tháng + ngày + %06d
    MA_KH("^(KH)\\d{14}$"),
    // Chuyến tàu Mã tàu + ngày + tháng + năm + %2d
    MA_CHUYEN("^[A-Z]{2,4}\\d{8}$"),
    // Định dạng email
    EMAIL("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"),
    // Số điện thoại Không được rỗng, phải bắt đầu bằng 0 và có 10 chữ số
    SDT("^0\\d{9}$"),

    // Ít nhất 8 ký tự, có ít nhất 1 chữ in hoa, có ít nhất 1 trong các ký tự đặt biệt, có ít nhất 1 chữ số.
    PASSWORD("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,}$"),

    // Định dạng CCCD phải có 12 số
    CCCD("^[0-9]{12}$");

    private final String regex;

    private Regex(String regex) {
        this.regex = regex;
    }

    public String getRegex() {
        return regex;
    }*/
        /*Validation {
    public static boolean maTK(String maTK) { return maTK.matches(Regex.MA_TK.getRegex()); }
    public static boolean maNV(String maNV) { return maNV.matches(Regex.MA_NV.getRegex()); }
    public static boolean maKM(String maKM) { return maKM.matches(Regex.MA_KM.getRegex()); }
    public static boolean maVe(String maVe) { return maVe.matches(Regex.MA_VE.getRegex()); }
    public static boolean maLV(String maLV) { return maLV.matches(Regex.MA_LV.getRegex()); }
    public static boolean maCho(String maCho) { return maCho.matches(Regex.MA_CHO.getRegex()); }
    public static boolean maToa(String maToa) { return maToa.matches(Regex.MA_TOA.getRegex()); }
    public static boolean maHD(String maHD) { return maHD.matches(Regex.MA_HD.getRegex()); }
    public static boolean maKH(String maKH) { return maKH.matches(Regex.MA_KH.getRegex()); }
    public static boolean maChuyen(String maChuyen) { return maChuyen.matches(Regex.MA_CHUYEN.getRegex()); }
    public static boolean email(String email) { return email.matches(Regex.EMAIL.getRegex()); }
    public static boolean password(String password) {
        return password.matches(Regex.PASSWORD.getRegex());
    }
    public static boolean sdt(String sdt) { return sdt.matches(Regex.SDT.getRegex()); }
    public static boolean CCCD(String CCCD) { return CCCD.matches(Regex.CCCD.getRegex()); }*/
        // validate cac cai sau dung regex cua toi
        // validate ho ten
        if (!Validation.hoTen(hoTen)) {
            JOptionPane.showMessageDialog(this, "Họ tên không hợp lệ");
            return false;
        }
        // validate ngay sinh phai lon 18 tuoi
        if (ngaySinh == null || !Validation.validateAge(ngaySinh)) {
            JOptionPane.showMessageDialog(this, "Ngày sinh không hợp lệ");
            return false;
        }
        // validate ngay vao lam
        // validate cccd
        if (!Validation.CCCD(cccd)) {
            JOptionPane.showMessageDialog(this, "CCCD không hợp lệ");
            return false;
        }
        // validate sdt
        if (!Validation.sdt(sdt)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ");
            return false;
        }
        // validate email
        if (!Validation.email(email)) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ");
            return false;
        }
        // validate dia chi
        // validate chuc vu
        // validate trang thai



        return true;
    }

    // get NhanVien from input
    private NhanVien getNhanVienFromInput() {
        String maNV = txtTimMaNhanVien.getText();
        String hoTen = txtHoTen.getText();
        String gioiTinh = cbxGioiTinh.getSelectedItem().toString();
        LocalDate ngaySinh = FormatDate.formatStrToLocalDate(txtNgaySinh.getJFormattedTextField().getText());
        LocalDate ngayVaoLam = FormatDate.formatStrToLocalDate(txtNgayVaoLam.getJFormattedTextField().getText());
        String cccd = txtCCCD.getText();
        String sdt = txtSDT.getText();
        String email = txtEmail.getText();
        String trangThai = cbxTrangThai.getSelectedItem().toString();
        String chucVu = cbxChucVu.getSelectedItem().toString();
        String diaChi = txtDiaChi.getText();
//    public NhanVien(String tenNV, String gioiTinh, LocalDate ngaySinh, String sdt, String email, String diaChi, String CCCD, LocalDate ngayVaoLam, ChucVu chucVu, TaiKhoan taiKhoan, String trangThai, CaLam caLam) {
        String maCv = chucVu.equals("Nhân viên") ? "NV" : "QL";
        String tenCalam = cbxCaLam.getSelectedItem().toString();
        String maCalam = tenCalam.equals("Ca 1") ? "CA1" : "CA2";

        NhanVien nv = new NhanVien(maNV, hoTen, gioiTinh, ngaySinh, sdt, email, diaChi, cccd, ngayVaoLam, new ChucVu(maCv, chucVu), new TaiKhoan(maNV,selectedNhanVien.getTaiKhoan().getMatKhauHash(),selectedNhanVien.getTaiKhoan().getTrangThai()), trangThai, new CaLam(maCalam, selectedNhanVien.getCaLam().getTenCL(),selectedNhanVien.getCaLam().getGioBD(),selectedNhanVien.getCaLam().getGioKetThuc()));
        System.out.println("nv" + nv);
        return nv;
    }

    private void updateModel() throws RemoteException {
        tblModelNhanVien.setRowCount(0);
        // lấy dữ liệu từ database
        listNhanVien = daoNhanVien.layDanhSachNhanVien();
        // thêm dữ liệu vào bảng
        for (NhanVien nv : listNhanVien) {
            tblModelNhanVien.addRow(new Object[]{
                    nv.getMaNV(),
                    nv.getTenNV(),
                    nv.getChucVu().getTenCV(),
                    nv.getSdt(),
                    nv.getTrangThai()
            });
        }
    }

    private void clickRow() {
        int row = tblNhanVien.getSelectedRow();
        if (row == -1) {
            return;
        }
        // Generate a random number between 1 and 8
        int soDu = row % 8 + 1;
        String newPath = "images/employees/nv-" + soDu + ".jpg";
        lblAvatar.setIcon(new CImage(newPath, 150, 200));
        NhanVien nv = listNhanVien.get(row);
        txtTimMaNhanVien.setText(nv.getMaNV());
        txtHoTen.setText(nv.getTenNV());
        cbxGioiTinh.setSelectedItem(nv.getGioiTinh());
        txtNgaySinh.getJFormattedTextField().setText(FormatDate.formatLocalDateToDMY(nv.getNgaySinh()));
        txtNgayVaoLam.getJFormattedTextField().setText(FormatDate.formatLocalDateToDMY(nv.getNgayVaoLam()));
        txtCCCD.setText(nv.getCCCD());
        txtSDT.setText(nv.getSdt());
        txtEmail.setText(nv.getEmail());
        cbxTrangThai.setSelectedItem(nv.getTrangThai());

        cbxChucVu.setSelectedItem(nv.getChucVu().getTenCV());

        txtDiaChi.setText(nv.getDiaChi());
        cbxCaLam.setSelectedItem(nv.getCaLam().getMaCL());
        selectedNhanVien = nv;
        System.out.println("nhan vien" + nv);
    }

    private void txtTimMaNhanVienActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        // click vào nút tìm
    }

    private void txtEmailActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtDiaChiActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    // khi change cbx filter chuc vu, trang thai thi update lai model
    private void cbxFilterChucVuActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String chucVu = cbxFilterChucVu.getSelectedItem().toString();
        String trangThai = cbxFilterTrangThai.getSelectedItem().toString();
        tblModelNhanVien.setRowCount(0);
        for (NhanVien nv : listNhanVien) {
            if (nv.getChucVu().getTenCV().equalsIgnoreCase(chucVu) && nv.getTrangThai().equalsIgnoreCase(trangThai)) {
                tblModelNhanVien.addRow(new Object[]{
                        nv.getMaNV(),
                        nv.getTenNV(),
                        nv.getChucVu().getTenCV(),
                        nv.getSdt(),
                        nv.getTrangThai()
                });
            }
        }
    }

    private void btnCapNhatActionPerformed(ActionEvent evt) throws RemoteException {
        // TODO add your handling code here:
      NhanVien nv = getNhanVienFromInput();
//        System.out.println("nv" + nv);
//        String maCV = nv.getChucVu().getTenCV().equalsIgnoreCase("Nhân viên") ? "NV" : "QL";
//        nv.setChucVu(new ChucVu(maCV, nv.getChucVu().getTenCV()));
        NhanVien nv2 = daoNhanVien.suaNhanVien(nv);
        System.out.println("nv2" + nv2);
        if (nv2 != null) {
            JOptionPane.showMessageDialog(this, "Cập nhật nhân viên thành công");
            updateModel();
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật nhân viên thất bại");
        }
    }

    private void btnThemActionPerformed(ActionEvent evt) throws RemoteException {
        // TODO add your handling code here:
        if (!validateInput()) {
            return;
        }
        NhanVien nv = getNhanVienFromInput();
        nv.setMaNV("");
        if (daoNhanVien.themNhanVien(nv)) {
            JOptionPane.showMessageDialog(this, "Thêm nhân viên thành công");
            updateModel();
        } else {
            JOptionPane.showMessageDialog(this, "Thêm nhân viên thất bại");
        }
    }

    // btn tim
    private void btnTimActionPerformed(ActionEvent evt) throws RemoteException {
        // TODO add your handling code here:
        String timKiem = txtTimMaNhanVien.getText();
        if (timKiem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã nhân viên");
            return;
        }
        NhanVien nv = daoNhanVien.getNhanVien(timKiem);
        if (nv == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy nhân viên");
            return;
        } else {
            // set data to table
            tblModelNhanVien.setRowCount(0);
            tblModelNhanVien.addRow(new Object[]{
                    nv.getMaNV(),
                    nv.getTenNV(),
                    nv.getChucVu().getTenCV(),
                    nv.getSdt(),
                    nv.getTrangThai()
            });
            // select row tim thay
            tblNhanVien.setRowSelectionInterval(0, 0);

            // set data to input
            txtHoTen.setText(nv.getTenNV());
            cbxGioiTinh.setSelectedItem(nv.getGioiTinh());
            txtNgaySinh.getJFormattedTextField().setText(FormatDate.formatLocalDateToDMY(nv.getNgaySinh()));
            txtNgayVaoLam.getJFormattedTextField().setText(FormatDate.formatLocalDateToDMY(nv.getNgayVaoLam()));
            txtCCCD.setText(nv.getCCCD());
            txtSDT.setText(nv.getSdt());
            txtEmail.setText(nv.getEmail());
            cbxTrangThai.setSelectedItem(nv.getTrangThai());
            cbxChucVu.setSelectedItem(nv.getChucVu().getTenCV());
            txtDiaChi.setText(nv.getDiaChi());
            cbxCaLam.setSelectedItem(nv.getCaLam().getMaCL());
        }
    }





    // Variables declaration - do not modify
    private JPanel boxChucNang;
    private CButton btnCapNhat;
    private CButton btnThem;
    private CButton btnTim;
    private JComboBox<String> cbxChucVu;
    private JComboBox<String> cbxFilterChucVu;
    private JComboBox<String> cbxFilterTrangThai;
    private JComboBox<String> cbxGioiTinh;
    private JComboBox<String> cbxTraCuu;
    private JComboBox<String> cbxTrangThai;
    private Box.Filler filler1;
    private Box.Filler filler10;
    private Box.Filler filler11;
    private Box.Filler filler12;
    private Box.Filler filler2;
    private Box.Filler filler3;
    private Box.Filler filler4;
    private Box.Filler filler5;
    private Box.Filler filler6;
    private Box.Filler filler7;
    private JLabel lblAvatar;
    private JLabel lblCCCD;
    private JLabel lblChucVu;
    private JLabel lblDiaChi;
    private JLabel lblEmail;
    private JLabel lblFilter;
    private JLabel lblFilterChucVu;
    private JLabel lblFilterTrangThai;
    private JLabel lblGioiTinh;
    private JLabel lblHoTen;
    private JLabel lblNgaySinh;
    private JLabel lblNgayVaoLam;
    private JLabel lblSDT;
    private JLabel lblTitle;
    private JLabel lblTrangThai;
    private JPanel pnlAvartar;
    private JPanel pnlAvatarInput;
    private JPanel pnlCCCD;
    private JPanel pnlChucVu;
    private JPanel pnlDiaChi;
    private JPanel pnlEmail;
    private JPanel pnlFilter;
    private JPanel pnlGioiTinh;
    private JPanel pnlHoTen;
    private JPanel pnlInput;
    private JPanel pnlLeft;
    private JPanel pnlNgaySinh;
    private JPanel pnlNgayVaoLam;
    private JPanel pnlRight;
    private JPanel pnlRightNorth;
    private JPanel pnlSDT;
    private JPanel pnlTop;
    private JPanel pnlTraCuu;
    private JPanel pnlTrangThai;
    private JScrollPane scrlTblNhanVien;
    private DefaultTableModel tblModelNhanVien;
    private CTable tblNhanVien;
    private CTextField txtCCCD;
    private CTextField txtDiaChi;
    private CTextField txtEmail;
    private CTextField txtHoTen;
    private JDatePickerImpl txtNgaySinh;
    private JDatePickerImpl txtNgayVaoLam;
    private CTextField txtSDT;
    private CTextField txtTimMaNhanVien;
    // End of variables declaration
}
