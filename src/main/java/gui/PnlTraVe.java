package gui;

import javax.swing.*;

import control.impl.DAOVe;
import entity.Ve;
import enums.EColor;
import gui.custom.CButton;
import gui.custom.CTable;
import gui.custom.CTextField;
import utils.FormatDate;
import utils.FormatMoney;

import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.rmi.RemoteException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;

import static java.lang.String.valueOf;


/**
 * @Dự án: tau-viet-express
 * @Class: pnLTraVe
 * @Tạo vào ngày: 24/10/2024
 * @Tác giả: Nguyen Huu Sang
 */
public class PnlTraVe extends JPanel {


    private JButton btnSearchVe;
    private JButton btnSearchHD;
    private double tongTienPhi;
    private double tongTienTra;


    /**
     * Creates new form PnlChuyenTau
     */
    public PnlTraVe() throws RemoteException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws RemoteException {

        pnlTop = new JPanel();
        lblTitle = new JLabel();
        pnlLeft = new JPanel();
        BoxTimVe = new JPanel();
        jcbMaVe = new JComboBox<>();
        fillerTimVe_1 = new Box.Filler(new Dimension(10, 0), new Dimension(10, 0), new Dimension(10, 32767));
        txtMaTraCuu = new CTextField();
        fillerTimVe_2 = new Box.Filler(new Dimension(10, 0), new Dimension(10, 0), new Dimension(10, 32767));
        btnTraCuu = new CButton();
        fillerInfo = new Box.Filler(new Dimension(0, 10), new Dimension(0, 15), new Dimension(32767, 10));
        boxInnfoVe = new JPanel();
        pnlInfoVe = new JPanel();
        pnlNgayDi = new JPanel();
        lblNgayDi = new JLabel();
        txtNgayDi = new CTextField();
        fillerNgayDI = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxChuyenTau = new JPanel();
        lblChuyenTau = new JLabel();
        txtChuyenTau = new CTextField();
        fillerChuyenTau = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxChoNgoi = new JPanel();
        lblChoNgoi = new JLabel();
        txtChoNgoi = new CTextField();
        fillerChoNgoi = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxKH = new JPanel();
        lblKH = new JLabel();
        txtKH = new CTextField();
        fillerKH = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxGiaVeKM = new JPanel();
        lblGiaVe = new JLabel();
        txtGiaVe = new CTextField();
        filler44 = new Box.Filler(new Dimension(5, 0), new Dimension(16, 0), new Dimension(5, 32767));
        lblKM = new JLabel();
        txtKM = new CTextField();
        fillerGiaVeKM = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxThanhTien = new JPanel();
        lblThanhTien = new JLabel();
        txtThanhTien = new CTextField();
        fillerThanhTien = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxTrangThai = new JPanel();
        lblTrangThai = new JLabel();
        txtTrangThai = new CTextField();
        fillerTrangThai = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxDieuKien = new JPanel();
        lblDieuKien = new JLabel();
        txtDieuKien = new CTextField();
        fillerDieuKien = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxXacNhan = new JPanel();
        boxXacNhan.setBackground(EColor.BG_COLOR.getColor());
        btnXacNhan = new CButton("Xác nhận", CButton.PRIMARY);
        fillerXacNhan = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        pnlRight = new JPanel();
        boxXoa = new JPanel();
        fillerXoa = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        btnXoa = new CButton("Xóa", CButton.SECONDARY);
        srlDsVe = new JScrollPane();
        tblModelVeTra = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "STT", "Mã vé", "Ngày đi", "Chuyến", "Chỗ", "Giá vé", "Tiền phí", "Tiền trả", "Điều kiện"
                }
        );
        tblModelVeDaTra = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "STT", "Mã vé", "Ngày đi", "Chuyến", "Chỗ", "Giá vé", "Tiền phí", "Tiền trả"
                }
        );
        tblVeTra = new CTable(tblModelVeTra) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblVeDaTra = new CTable(tblModelVeDaTra) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        fillerTable = new Box.Filler(new Dimension(0, 10), new Dimension(0, 30), new Dimension(32767, 10));
        boxTraVe = new JPanel();
        fillerTraVe = new Box.Filler(new Dimension(200, 0), new Dimension(150, 0), new Dimension(32767, 0));
        lblPhiTraVe = new JLabel();
        fillerPhiTraVe = new Box.Filler(new Dimension(20, 0), new Dimension(15, 0), new Dimension(20, 32767));
        txtPhiTraVe = new CTextField();
        fillerPhiTraVe_2 = new Box.Filler(new Dimension(20, 0), new Dimension(30, 0), new Dimension(20, 32767));
        lblTienTra = new JLabel();
        fillerPhiTraVe_3 = new Box.Filler(new Dimension(20, 0), new Dimension(15, 0), new Dimension(20, 32767));
        txtTienTra = new CTextField();
        fillerPhiTraVe_4 = new Box.Filler(new Dimension(20, 0), new Dimension(30, 0), new Dimension(20, 32767));
        btnTraVe = new CButton("Trả vé", CButton.PRIMARY);
        setPreferredSize(new Dimension(1920, 800));
        setBackground(EColor.BG_COLOR.getColor());
        setLayout(new BorderLayout());

        pnlTop.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pnlTop.setFont(new Font("Arial", 1, 12)); // NOI18N
        pnlTop.setBackground(EColor.BG_COLOR.getColor());
        pnlTop.setLayout(new BorderLayout());

        lblTitle.setFont(new Font("Arial", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setText("Trả vé");
        pnlTop.add(lblTitle, BorderLayout.CENTER);

        add(pnlTop, BorderLayout.NORTH);

        pnlLeft.setFont(new Font("Arial", 1, 12)); // NOI18N
        pnlLeft.setPreferredSize(new Dimension(400, 182));
        pnlLeft.setLayout(new BorderLayout());
        pnlLeft.setBackground(EColor.BG_COLOR.getColor());

        TitledBorder titledBorder = new TitledBorder("Tra cứu vé");
        titledBorder.setTitleFont(new Font("Arial", Font.BOLD, 14));
        BoxTimVe.setBorder(
                BorderFactory.createCompoundBorder(
                        titledBorder,
                        BorderFactory.createEmptyBorder(10, 10, 10, 10)
                )
        );
        BoxTimVe.setLayout(new BoxLayout(BoxTimVe, BoxLayout.LINE_AXIS));
        BoxTimVe.setBackground(EColor.BG_COLOR.getColor());

        jcbMaVe.setModel(new DefaultComboBoxModel<>(new String[]{"Mã vé", "Mã hóa đơn"}));
        jcbMaVe.setAutoscrolls(true);
        jcbMaVe.setBackground(EColor.BG_COLOR.getColor());
        jcbMaVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jcbMaVeActionPerformed(evt);
            }
        });
        BoxTimVe.add(jcbMaVe);
        BoxTimVe.add(fillerTimVe_1);

        txtMaTraCuu.setDoubleBuffered(true);
        txtMaTraCuu.setPreferredSize(new Dimension(200, 30));
        txtMaTraCuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtMaTraCuuActionPerformed(evt);
            }
        });
        BoxTimVe.add(txtMaTraCuu);
        BoxTimVe.add(fillerTimVe_2);

        btnTraCuu.setText("Tra cứu");
        btnTraCuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnTraCuuActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        BoxTimVe.add(btnTraCuu);

        pnlLeft.add(BoxTimVe, BorderLayout.NORTH);
        pnlLeft.add(fillerInfo, BorderLayout.CENTER);

        TitledBorder titledBorder1 = new TitledBorder("Thông tin vé trả");
        titledBorder1.setTitleFont(new Font("Arial", Font.BOLD, 14));

        boxInnfoVe.setBorder(BorderFactory.createCompoundBorder(
                titledBorder1,
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        boxInnfoVe.setFont(new Font("Arial", 1, 12)); // NOI18N
        boxInnfoVe.setLayout(new BorderLayout());
        boxInnfoVe.setBackground(EColor.BG_COLOR.getColor());

        pnlInfoVe.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pnlInfoVe.setLayout(new BoxLayout(pnlInfoVe, BoxLayout.Y_AXIS));
        pnlInfoVe.setBackground(EColor.BG_COLOR.getColor());

        pnlNgayDi.setLayout(new BoxLayout(pnlNgayDi, BoxLayout.X_AXIS));
        pnlNgayDi.setBackground(EColor.BG_COLOR.getColor());

        lblNgayDi.setText("Ngày đi");
        lblNgayDi.setPreferredSize(new Dimension(80, 0));
        pnlNgayDi.add(lblNgayDi);

        txtNgayDi.setPreferredSize(new Dimension(200, 30));
        txtNgayDi.setBackground(EColor.BG_COLOR.getColor());
        txtNgayDi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtNgayDiActionPerformed(evt);
            }
        });
        pnlNgayDi.add(txtNgayDi);

        pnlInfoVe.add(pnlNgayDi);
        pnlInfoVe.add(fillerNgayDI);

        boxChuyenTau.setLayout(new BoxLayout(boxChuyenTau, BoxLayout.X_AXIS));
        boxChuyenTau.setBackground(EColor.BG_COLOR.getColor());

        lblChuyenTau.setText("Chuyến tàu");
        lblChuyenTau.setPreferredSize(new Dimension(80, 0));
        boxChuyenTau.add(lblChuyenTau);

        txtChuyenTau.setPreferredSize(new Dimension(200, 30));
        txtChuyenTau.setBackground(EColor.BG_COLOR.getColor());
        boxChuyenTau.add(txtChuyenTau);

        pnlInfoVe.add(boxChuyenTau);
        pnlInfoVe.add(fillerChuyenTau);

        boxChoNgoi.setLayout(new BoxLayout(boxChoNgoi, BoxLayout.X_AXIS));
        boxChoNgoi.setBackground(EColor.BG_COLOR.getColor());

        lblChoNgoi.setText("Chỗ ngồi");
        lblChoNgoi.setPreferredSize(new Dimension(80, 0));
        boxChoNgoi.add(lblChoNgoi);

        txtChoNgoi.setPreferredSize(new Dimension(200, 30));
        txtChoNgoi.setBackground(EColor.BG_COLOR.getColor());
        boxChoNgoi.add(txtChoNgoi);

        pnlInfoVe.add(boxChoNgoi);
        pnlInfoVe.add(fillerChoNgoi);

        boxKH.setLayout(new BoxLayout(boxKH, BoxLayout.X_AXIS));
        boxKH.setBackground(EColor.BG_COLOR.getColor());

        lblKH.setText("Khách hàng");
        lblKH.setPreferredSize(new Dimension(80, 0));
        boxKH.add(lblKH);

        txtKH.setPreferredSize(new Dimension(200, 30));
        txtKH.setBackground(EColor.BG_COLOR.getColor());
        boxKH.add(txtKH);

        pnlInfoVe.add(boxKH);
        pnlInfoVe.add(fillerKH);

        boxGiaVeKM.setLayout(new BoxLayout(boxGiaVeKM, BoxLayout.X_AXIS));
        boxGiaVeKM.setBackground(EColor.BG_COLOR.getColor());

        lblGiaVe.setText("Giá vé");
        lblGiaVe.setPreferredSize(new Dimension(80, 0));
        txtGiaVe.setBackground(EColor.BG_COLOR.getColor());

        lblKM.setText("Khuyến mãi");
        boxGiaVeKM.add(lblKM);
        boxGiaVeKM.add(Box.createHorizontalStrut(10));

        txtKM.setPreferredSize(new Dimension(200, 30));
        txtKM.setBackground(EColor.BG_COLOR.getColor());
        boxGiaVeKM.add(txtKM);

        pnlInfoVe.add(boxGiaVeKM);
        pnlInfoVe.add(fillerGiaVeKM);

        boxThanhTien.setLayout(new BoxLayout(boxThanhTien, BoxLayout.X_AXIS));
        boxThanhTien.setBackground(EColor.BG_COLOR.getColor());

        lblThanhTien.setText("Thành tiền");
        lblThanhTien.setPreferredSize(new Dimension(80, 0));
        boxThanhTien.add(lblThanhTien);

        txtKM.setPreferredSize(new Dimension(200, 30));
        txtThanhTien.setBackground(EColor.BG_COLOR.getColor());
        boxThanhTien.add(txtThanhTien);

        pnlInfoVe.add(boxThanhTien);
        pnlInfoVe.add(fillerThanhTien);

        boxTrangThai.setLayout(new BoxLayout(boxTrangThai, BoxLayout.X_AXIS));
        boxTrangThai.setBackground(EColor.BG_COLOR.getColor());

        lblTrangThai.setText("Trạng thái");
        lblTrangThai.setPreferredSize(new Dimension(80, 0));
        boxTrangThai.add(lblTrangThai);

        txtTrangThai.setPreferredSize(new Dimension(200, 30));
        txtTrangThai.setBackground(EColor.BG_COLOR.getColor());
        boxTrangThai.add(txtTrangThai);

        pnlInfoVe.add(boxTrangThai);
        pnlInfoVe.add(fillerTrangThai);

        boxDieuKien.setLayout(new BoxLayout(boxDieuKien, BoxLayout.X_AXIS));
        boxDieuKien.setBackground(EColor.BG_COLOR.getColor());

        lblDieuKien.setText("Điều kiện");
        lblDieuKien.setPreferredSize(new Dimension(80, 0));
        boxDieuKien.add(lblDieuKien);

        txtDieuKien.setPreferredSize(new Dimension(200, 30));
        txtDieuKien.setBackground(EColor.BG_COLOR.getColor());
        boxDieuKien.add(txtDieuKien);

        pnlInfoVe.add(boxDieuKien);
        pnlInfoVe.add(fillerDieuKien);

        btnXacNhan.setText("Xác nhận");
        btnXacNhan.setEnabled(false);
        btnXacNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnXacNhanActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        boxXacNhan.add(btnXacNhan);

        pnlInfoVe.add(boxXacNhan);
        pnlInfoVe.add(fillerXacNhan);

        boxInnfoVe.add(pnlInfoVe, BorderLayout.NORTH);

        pnlLeft.add(boxInnfoVe, BorderLayout.CENTER);

        add(pnlLeft, BorderLayout.LINE_START);

        pnlRight.setFont(new Font("Arial", 1, 12)); // NOI18N
        pnlRight.setLayout(new BorderLayout());
        pnlRight.setBackground(EColor.BG_COLOR.getColor());

        boxXoa.setBorder(
                new EmptyBorder(10, 10, 10, 10)
        );
        boxXoa.setLayout(new BoxLayout(boxXoa, BoxLayout.LINE_AXIS));
        boxXoa.setBackground(EColor.BG_COLOR.getColor());
        boxXoa.add(fillerXoa);

        btnXoa.setText("Xóa");
        btnXoa.setName(""); // NOI18N
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnXoaActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        boxXoa.add(btnXoa);

        srlDsVe.setPreferredSize(new Dimension(452, 302));
        srlDsVe.setBackground(EColor.BG_COLOR.getColor());
        srlDsVe.setViewportView(tblVeTra);

        TitledBorder titledBorder2 = new TitledBorder("Danh sách vé đã trả");
        titledBorder2.setTitleFont(new Font("Arial", Font.BOLD, 14));
        JPanel pnlVeDaTra = new JPanel();
        pnlVeDaTra.setLayout(new BorderLayout());
        pnlVeDaTra.setBorder(BorderFactory.createCompoundBorder(
                titledBorder2,
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        pnlVeDaTra.setBackground(EColor.BG_COLOR.getColor());
        pnlVeDaTra.add(new JScrollPane(tblVeDaTra), BorderLayout.CENTER);

        TitledBorder titledBorder3 = new TitledBorder("Danh sách chờ xử lý");
        titledBorder3.setTitleFont(new Font("Arial", Font.BOLD, 14));
        JPanel pnlVeTra = new JPanel();
        pnlVeTra.setLayout(new BorderLayout());
        pnlVeTra.setBorder(BorderFactory.createCompoundBorder(
                titledBorder3,
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        pnlVeTra.setBackground(EColor.BG_COLOR.getColor());
        pnlVeTra.add(srlDsVe, BorderLayout.CENTER);
        pnlVeTra.add(boxXoa, BorderLayout.SOUTH);

        Box boxTable = Box.createHorizontalBox();
        boxTable.add(pnlVeTra);
        boxTable.add(pnlVeDaTra);

        pnlRight.add(boxTable, BorderLayout.CENTER);
        pnlRight.add(fillerTable, BorderLayout.LINE_END);

        boxTraVe.setBorder(
                BorderFactory.createCompoundBorder(
                        BorderFactory.createTitledBorder("Thông tin thanh toán"),
                        BorderFactory.createEmptyBorder(10, 10, 10, 10)
                )
        );
        boxTraVe.setLayout(new BoxLayout(boxTraVe, BoxLayout.LINE_AXIS));
        boxTraVe.setBackground(EColor.BG_COLOR.getColor());
        boxTraVe.add(fillerTraVe);

        lblPhiTraVe.setText("Phí trả vé: ");
        boxTraVe.add(lblPhiTraVe);
        boxTraVe.add(fillerPhiTraVe);
        boxTraVe.add(txtPhiTraVe);
        txtPhiTraVe.setEditable(false);
        boxTraVe.add(fillerPhiTraVe_2);

        lblTienTra.setText("Tiền trả: ");
        boxTraVe.add(lblTienTra);
        boxTraVe.add(fillerPhiTraVe_3);
        boxTraVe.add(txtTienTra);
        txtTienTra.setEditable(false);
        boxTraVe.add(fillerPhiTraVe_4);

        btnTraVe.setText("Trả vé");
        btnTraVe.setPreferredSize(new Dimension(100, 30));
        btnTraVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnTraVeActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        boxTraVe.add(btnTraVe);

        pnlRight.add(boxTraVe, BorderLayout.SOUTH);

        add(pnlRight, BorderLayout.CENTER);
        khoaTextField();
        tblVeTra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                try {
                    tableDsVeMouseClicked(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });


        docVeDaTraLenTable();
    }// </editor-fold>

    public void docVeDaTraLenTable() throws RemoteException {
        ArrayList<Ve> listVeDaTra = DAOVe.getDanhSachVeDaTra();

        tblModelVeDaTra.setRowCount(0);

        for (Ve ve : listVeDaTra) {
            double giaVe = ve.getChoNgoi().getLoaiCho().getGiaCho();
            double tienPhi = tinhTienPhi(ve);
            double tienTra = tinhTienTra(ve);
            Object[] rowData = new Object[]{
                    tblModelVeDaTra.getRowCount() + 1, ve.getMaVe(),
                    FormatDate.formatLocalDateTimeToDMY(ve.getChuyenTau().getNgayGioDi()),
                    ve.getChuyenTau().getGaDi().getTenGa().substring(6) + " --> " + ve.getChuyenTau().getGaDen().getTenGa().substring(6),
                    "Toa " + ve.getChoNgoi().getToa().getMaToa().substring(ve.getChoNgoi().getToa().getMaToa().length() - 2) + " - Ghế " + ve.getChoNgoi().getMaCho().substring(ve.getChoNgoi().getMaCho().length() - 2),
                    FormatMoney.format(giaVe),
                    FormatMoney.format(tienPhi),
                    FormatMoney.format(tienTra)
            };
            tblModelVeDaTra.addRow(rowData);
        }


    }

    private void tableDsVeMouseClicked(MouseEvent evt) throws RemoteException {
        int selectedRow = tblVeTra.getSelectedRow();
        if (selectedRow != -1) {
            String maVe = tblVeTra.getValueAt(selectedRow, 1).toString();
            Ve ve = DAOVe.layVeTheoMa(maVe);
            if (ve != null) {
                txtNgayDi.setText(FormatDate.formatLocaldatetimeToString(ve.getChuyenTau().getNgayGioDi()));
                txtChuyenTau.setText(ve.getChuyenTau().getGaDi().getTenGa().substring(6) + " --> " + ve.getChuyenTau().getGaDen().getTenGa().substring(6) + " - " + ve.getChuyenTau().getMaChuyen());
                String maChoNgoi = ve.getChoNgoi().getMaCho();
                String soThuTuCho = maChoNgoi.substring(maChoNgoi.length() - 2);
                String maToa = ve.getChoNgoi().getToa().getMaToa();
                String soThuTuToa = maToa.substring(maToa.length() - 2);
                txtChoNgoi.setText("Toa " + soThuTuToa + " - Ghế " + soThuTuCho + " - " + ve.getChoNgoi().getLoaiCho().getTenLC());
                txtKH.setText(ve.getKhachHang().getTenKH() + " - " + ve.getKhachHang().getSdt());
                txtGiaVe.setText(valueOf(FormatMoney.format(ve.getChoNgoi().getLoaiCho().getGiaCho())));
                double kmai = ve.getKhuyenMai() != null ? ve.getKhuyenMai().getPhanTramKM() : 0;
                double tienKM = ve.getChoNgoi().getLoaiCho().getGiaCho() * kmai;
                txtKM.setText(valueOf(FormatMoney.format(tienKM)) + " (" + kmai * 100 + "%)");
                txtThanhTien.setText(valueOf(FormatMoney.format(ve.getThanhTien())));
                txtTrangThai.setText(ve.getTrangThai());

                // găn điều kiện trả vé
                // Lấy thời gian hiện tại
                LocalDateTime now = LocalDateTime.now();

                // Lấy thời gian khởi hành của chuyến tàu
                LocalDateTime ngayGioDi = ve.getChuyenTau().getNgayGioDi();

                // Tính toán khoảng thời gian giữa hiện tại và thời gian khởi hành
                long hoursUntilDeparture = Duration.between(now, ngayGioDi).toHours();

                if (txtTrangThai.getText().equals("DA_DOI")) {
                    txtDieuKien.setText("Vé không đủ điều kiện trả! ( đã đổi vé )");
//                txtLePhi.setText("");
//                txtTienPhi.setText("");
                } else if(txtTrangThai.getText().equals("DA_TRA")) {
                    txtDieuKien.setText("Vé không đủ điều kiện trả! ( đã trả vé )");

                } else {
                    // Kiểm tra điều kiện trả vé
                    if (hoursUntilDeparture < 4) {
                        txtDieuKien.setText("Không đủ điều kiện trả vé (Dưới 04 giờ)");
                    } else {

                        if (hoursUntilDeparture >= 4 && hoursUntilDeparture < 24) {
                            txtDieuKien.setText("Đủ điều kiện trả vé (Từ 04 giờ đến dưới 24 giờ)");

                        } else if (hoursUntilDeparture >= 24) {
                            txtDieuKien.setText("Đủ điều kiện trả vé (Trên 24 giờ)");

                        }
                    }
                }

            }
        }
    }

    private void btnXoaActionPerformed(ActionEvent evt) throws RemoteException {
        int selectedRow = tblVeTra.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn vé để xóa!");
            return;
        }

        // Xóa hàng được chọn   
        tblModelVeTra.removeRow(selectedRow);

        // Cập nhật lại số thứ tự của các hàng
        for (int i = 0; i < tblVeTra.getRowCount(); i++) {
            tblModelVeTra.setValueAt(i + 1, i, 0);
        }

        // Cập nhật tổng tiền phí sau khi thêm vé
        tinhTongTienPhi();
        // Cập nhật tổng tiền trả sau khi thêm vé
        tinhTongTienTra();
    }

    private void txtMaTraCuuActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void btnTraCuuActionPerformed(ActionEvent evt) throws RemoteException {
        if (jcbMaVe.getSelectedItem().equals("Mã vé")) {
            timVe();
        } else if (jcbMaVe.getSelectedItem().equals("Mã hóa đơn")) {
            timDSVeTheoHD();
        }
    }

    private void btnXacNhanActionPerformed(ActionEvent evt) throws RemoteException {
        String maVe = txtMaTraCuu.getText().trim();
        Ve ve = DAOVe.layVeTheoMa(maVe);

        // Kiểm tra có đủ điều kiện trả vé không
        if (checkDKVe(ve)==false) {
            JOptionPane.showMessageDialog(this, "Vé không đủ điều kiện trả!");
            return;
        }

        //Kiểm tra vé đã tồn tại trong table chưa
        for (int i = 0; i < tblModelVeTra.getRowCount(); i++) {
            if (tblModelVeTra.getValueAt(i, 1).equals(maVe)) {
                JOptionPane.showMessageDialog(this, "Vé đã tồn tại trong danh sách!");
                return;
            }
        }

        //Nếu chưa thì thêm vào table
        String ngayDi = FormatDate.formatLocaldatetimeToString(ve.getChuyenTau().getNgayGioDi());
        String chuyenTau = (ve.getChuyenTau().getGaDi().getTenGa().substring(6) + " --> " + ve.getChuyenTau().getGaDen().getTenGa().substring(6));

        String maChoNgoi = ve.getChoNgoi().getMaCho();
        String soThuTuCho = maChoNgoi.substring(maChoNgoi.length() - 2);
        String maToa = ve.getChoNgoi().getToa().getMaToa();
        String soThuTuToa = maToa.substring(maToa.length() - 2);
        String choNgoi = "Toa " + soThuTuToa + " - Ghế " + soThuTuCho;

        String giaVe = FormatMoney.format(ve.getChoNgoi().getLoaiCho().getGiaCho());

        String tienPhi = FormatMoney.format(tinhTienPhi(ve));
        String tienTra = FormatMoney.format(tinhTienTra(ve));
        String dieuKien = checkDKVe(ve) ? "Đủ điều kiện trả vé" : "Không đủ điều kiện trả vé";

        // Thêm dữ liệu vé vào bảng
        tblModelVeTra.addRow(new Object[]{tblModelVeTra.getRowCount() + 1, maVe, ngayDi, chuyenTau, choNgoi, giaVe, tienPhi, tienTra, dieuKien});

        // Cập nhật tổng tiền phí sau khi thêm vé
        tinhTongTienPhi();
        // Cập nhật tổng tiền trả sau khi thêm vé
        tinhTongTienTra();
        // Hiển thị thông báo xác nhận
        resetFields();
        btnXacNhan.setEnabled(false);
    }

    private void btnTraVeActionPerformed(ActionEvent evt) throws RemoteException {
        int rowCount = tblModelVeTra.getRowCount();
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(this, "Danh sách vé trống!");
            return;
        }

        // nếu không có vé nào đủ điều kiện thì hiển thị thông báo không có vé nào đủ điều kiện
        boolean isAllNotEligible = true;
        for (int i = 0; i < rowCount; i++) {
            String maVe = tblModelVeTra.getValueAt(i, 1).toString();
            Ve ve = DAOVe.layVeTheoMa(maVe);
            if (checkDKVe(ve)) {
                isAllNotEligible = false;
                break;
            }
        }

        if (isAllNotEligible) {
            JOptionPane.showMessageDialog(this, "Không có vé nào đủ điều kiện trả!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn trả vé không?", "Xác nhận trả vé", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            for (int i = 0; i < rowCount; i++) {
                String maVe = tblModelVeTra.getValueAt(i, 1).toString();
                Ve ve = DAOVe.layVeTheoMa(maVe);

                if (ve != null) {
                    //check điều kiện trả vé
                    if(checkDKVe(ve)){
                        ve.setTrangThai("DA_TRA");
                        DAOVe.suaVe(ve);

                        // Thêm vé đã trả vào bảng
                        double giaVe = ve.getChoNgoi().getLoaiCho().getGiaCho();
                        double tienPhi = tinhTienPhi(ve);
                        double tienTra = tinhTienTra(ve);
                        Object[] rowData = new Object[]{
                                tblModelVeDaTra.getRowCount() + 1, ve.getMaVe(),
                                FormatDate.formatLocalDateTimeToDMY(ve.getChuyenTau().getNgayGioDi()),
                                ve.getChuyenTau().getGaDi().getTenGa().substring(6) + " --> " + ve.getChuyenTau().getGaDen().getTenGa().substring(6),
                                "Toa " + ve.getChoNgoi().getToa().getMaToa().substring(ve.getChoNgoi().getToa().getMaToa().length() - 2) + " - Ghế " + ve.getChoNgoi().getMaCho().substring(ve.getChoNgoi().getMaCho().length() - 2),
                                FormatMoney.format(giaVe),
                                FormatMoney.format(tienPhi),
                                FormatMoney.format(tienTra)
                        };
                        tblModelVeDaTra.addRow(rowData);
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "Trả vé thành công!");
            tblModelVeTra.setRowCount(0);
        }
    }

    private void jcbMaVeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtNgayDiActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtTraVeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtGaDiActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }


    private void timDSVeTheoHD() throws RemoteException {
        String maHD = txtMaTraCuu.getText().trim();

        if (maHD.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã để tìm kiếm!");
            return;
        }

        ArrayList<Ve> listVe = DAOVe.layDSVeTheoMaHD(maHD);

        if (listVe.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy vé nào với mã hóa đơn " + maHD + "!");
            return;
        }

        tblModelVeTra.setRowCount(0); // Xóa dữ liệu cũ

        for (Ve ve : listVe) {
            double giaVe = ve.getChoNgoi().getLoaiCho().getGiaCho();

            boolean isEligible = checkDKVe(ve);
            String dieuKien = isEligible ? "Đủ điều kiện": "Không đủ điều kiện";
            Object[] rowData = new Object[]{
                    tblModelVeTra.getRowCount() + 1, ve.getMaVe(),
                    FormatDate.formatLocalDateTimeToDMY(ve.getChuyenTau().getNgayGioDi()),
                    ve.getChuyenTau().getMaChuyen(),
                    ve.getChoNgoi().getMaCho(),
                    FormatMoney.format(giaVe),
                    FormatMoney.format(tinhTienPhi(ve)),
                    FormatMoney.format(tinhTienTra(ve)),
                    dieuKien
            };
            tblModelVeTra.addRow(rowData);
        }

        // Cập nhật tổng tiền phí sau khi thêm vé
        tinhTongTienPhi();
        // Cập nhật tổng tiền trả sau khi thêm vé
        tinhTongTienTra();
    }


    private void timVe() throws RemoteException {
        String maVe = txtMaTraCuu.getText().trim(); // Lấy mã vé từ JTextField txtMaTraCuu

        if (maVe.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã vé để tìm kiếm!");
            return;
        }

        // Gọi hàm DAO để lấy thông tin vé dựa trên mã vé
        Ve ve = DAOVe.layVeTheoMa(maVe);

        if (ve != null) {
            if (!ve.getTrangThai().equals("DA_BAN")) {
                JOptionPane.showMessageDialog(this, "Trạng thái vé không đủ điều kiện trả!");

            }
            // Hiển thị thông tin vé lên các JTextField tương ứng
            txtNgayDi.setText(FormatDate.formatLocaldatetimeToString(ve.getChuyenTau().getNgayGioDi()));
//            txtChuyenTau.setText(FormatDate.formatLocalDateTimeToDMY(ve.getChuyenTau().getNgayGioDen()));
            txtChuyenTau.setText(ve.getChuyenTau().getGaDi().getTenGa().substring(6) + " --> " + ve.getChuyenTau().getGaDen().getTenGa().substring(6) + " - " + ve.getChuyenTau().getMaChuyen());
//            txtChoNgoi.setText(ve.getChoNgoi().getMaCho());

//            txtChoNgoi.setText(ve.getChoNgoi().getLoaiCho().getTenLC());
            String maCho = ve.getChoNgoi().getMaCho();
            String maChoNgoi = ve.getChoNgoi().getMaCho();
            String soThuTuCho = maChoNgoi.substring(maChoNgoi.length() - 2);
            String maToa = ve.getChoNgoi().getToa().getMaToa();
            String soThuTuToa = maToa.substring(maToa.length() - 2);
            txtChoNgoi.setText("Toa " + soThuTuToa + " - Ghế " + soThuTuCho +" - "+  ve.getChoNgoi().getLoaiCho().getTenLC() );
            txtKH.setText(ve.getKhachHang().getTenKH() + " - " + ve.getKhachHang().getSdt());

            double giaVe = ve.getChoNgoi().getLoaiCho().getGiaCho();
            txtGiaVe.setText(valueOf(FormatMoney.format(giaVe)));

            double kmai = ve.getKhuyenMai() != null ? ve.getKhuyenMai().getPhanTramKM() : 0;
            double tienKM = giaVe * kmai;

            txtKM.setText(valueOf(FormatMoney.format(tienKM)) + " (" + kmai*100 + "%)");
            txtThanhTien.setText(valueOf(FormatMoney.format(ve.getThanhTien())));

//            txtTgChay.setText(ve.getChuyenTau().getThoiGianChay());

            txtTrangThai.setText(ve.getTrangThai());

            // Lấy thời gian hiện tại
            LocalDateTime now = LocalDateTime.now();

            // Lấy thời gian khởi hành của chuyến tàu
            LocalDateTime ngayGioDi = ve.getChuyenTau().getNgayGioDi();

            // Tính toán khoảng thời gian giữa hiện tại và thời gian khởi hành
            long hoursUntilDeparture = Duration.between(now, ngayGioDi).toHours();

            // Khai báo biến để tính toán lệ phí và tiền phí

            double thanhTien = ve.getThanhTien(); // Lấy tổng thành tiền của vé

            if (txtTrangThai.getText().equals("DA_DOI")) {
                txtDieuKien.setText("Vé không đủ điều kiện trả! ( đã đổi vé )");
//                txtLePhi.setText("");
//                txtTienPhi.setText("");
            } else if(txtTrangThai.getText().equals("DA_TRA")) {
                txtDieuKien.setText("Vé không đủ điều kiện trả! ( đã trả vé )");

            } else {
                // Kiểm tra điều kiện trả vé
                if (hoursUntilDeparture < 4) {
                    txtDieuKien.setText("Không đủ điều kiện trả vé (Dưới 04 giờ)");
//                    txtLePhi.setText(""); // Set trống cho lệ phí
//                    txtTienPhi.setText(""); // Set trống cho tiền phí
                } else {
                    // du dieu kien tra ve
                    double lePhi;
                    double tienPhi;
                    if (hoursUntilDeparture >= 4 && hoursUntilDeparture < 24) {
                        txtDieuKien.setText("Đủ điều kiện trả vé (Từ 04 giờ đến dưới 24 giờ)");
                        lePhi = 0.2; // Lệ phí là 20%
                        tienPhi = lePhi * giaVe; // Tính tiền phí
                        if (tienPhi < 10000) {
                            tienPhi = 10000;
                        }
//                        txtLePhi.setText("20%"); // Hiển thị lệ phí 20%
//                        txtTienPhi.setText(String.valueOf(tienPhi)); // Hiển thị tiền phí
                    } else if (hoursUntilDeparture >= 24) {
                        txtDieuKien.setText("Đủ điều kiện trả vé (Trên 24 giờ)");
                        lePhi = 0.1; // Lệ phí là 10%
                        tienPhi = lePhi * giaVe; // Tính tiền phí
                        if (tienPhi < 10000) {
                            tienPhi = 10000;
                        }
//                        txtLePhi.setText("10%"); // Hiển thị lệ phí 10%
//                        txtTienPhi.setText(String.valueOf(tienPhi)); // Hiển thị tiền phí
                    }

                }
            }
            // Khóa các JTextField sau khi hiển thị thông tin
            khoaTextField();
            btnXacNhan.setEnabled(true);

        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy vé với mã: " + maVe);
        }
    }

    // check vé đủ điều kiện trả hay không
    private boolean checkDKVe(Ve ve){

        //Check trạng thái vé
        if (!ve.getTrangThai().equals("DA_BAN")) {
            return false;
        }

        // Lấy thời gian hiện tại
        LocalDateTime now = LocalDateTime.now();

        // Lấy thời gian khởi hành của chuyến tàu
        LocalDateTime ngayGioDi = ve.getChuyenTau().getNgayGioDi();

        // Tính toán khoảng thời gian giữa hiện tại và thời gian khởi hành
        long hoursUntilDeparture = Duration.between(now, ngayGioDi).toHours();

        // Kiểm tra điều kiện trả vé
        if (hoursUntilDeparture < 4) {
            return false;
        } else {
            return true;
        }

    }

    private void traVe() {
        // Lấy mã vé từ JTextField
        String maVeTra = txtMaTraCuu.getText().trim();

        // Kiểm tra nếu mã vé trống
        if (maVeTra.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã vé!");
            return;
        }

        // Lấy mô hình dữ liệu của bảng
        DefaultTableModel model = (DefaultTableModel) tblVeTra.getModel();

        boolean veDaTimThay = false;

        // Duyệt qua các hàng trong bảng để tìm mã vé cần trả
        for (int i = 0; i < model.getRowCount(); i++) {
            String maVeTrongBang = model.getValueAt(i, 1).toString(); // Cột 1 chứa mã vé

            if (maVeTrongBang.equals(maVeTra)) {
                // Cập nhật trạng thái của vé thành "Đã trả"
                model.setValueAt("Đã trả", i, 10); // Cột 10 chứa trạng thái vé
                veDaTimThay = true;
            }
        }

        // Hiển thị thông báo nếu mã vé không tồn tại
        if (!veDaTimThay) {
            JOptionPane.showMessageDialog(this, "Mã vé không tồn tại trong danh sách!");
        } else {
            JOptionPane.showMessageDialog(this, "Vé đã được trả thành công!");
        }
    }

    private double tinhTienPhi(Ve ve) {
        double giaVe = ve.getChoNgoi().getLoaiCho().getGiaCho();
        double lePhi = 0;
        double tienPhi = 0;

        long hoursUntilDeparture = Duration.between(LocalDateTime.now(), ve.getChuyenTau().getNgayGioDi()).toHours();

        if (hoursUntilDeparture >= 4 && hoursUntilDeparture < 24) {
            lePhi = 0.2;
            tienPhi = Math.max(10000, lePhi * giaVe);
        } else if (hoursUntilDeparture >= 24) {
            lePhi = 0.1;
            tienPhi = Math.max(10000, lePhi * giaVe);
        }

        if (tienPhi < 10000) {
            tienPhi = 10000;
        }

        return tienPhi;

    }

    private double tinhTienTra(Ve ve) {
        double giaVe = ve.getChoNgoi().getLoaiCho().getGiaCho();
        double tienPhi = tinhTienPhi(ve);
        double tienTra = giaVe - tienPhi;
        return tienTra;
    }

    private void tinhTongTienPhi() throws RemoteException {
        double tongTienPhi = 0;
        DefaultTableModel model = (DefaultTableModel) tblVeTra.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if(checkDKVe(DAOVe.layVeTheoMa(model.getValueAt(i, 1).toString()))){
                double tienPhi =  tinhTienPhi(DAOVe.layVeTheoMa(model.getValueAt(i, 1).toString()));
                tongTienPhi += tienPhi;
            }
        }
        txtPhiTraVe.setText(valueOf(FormatMoney.format(tongTienPhi)));
    }

    private void tinhTongTienTra() throws RemoteException {
        double tongTienTra = 0;
        DefaultTableModel model = (DefaultTableModel) tblVeTra.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if(checkDKVe(DAOVe.layVeTheoMa(model.getValueAt(i, 1).toString()))) {
                double tienTra = tinhTienTra(DAOVe.layVeTheoMa(model.getValueAt(i, 1).toString()));
                tongTienTra += tienTra;
            }
        }
        txtTienTra.setText(valueOf(FormatMoney.format(tongTienTra)));
    }

    private void khoaTextField() {
        txtNgayDi.setEditable(false);
        txtChuyenTau.setEditable(false);
        txtChoNgoi.setEditable(false);
        txtKH.setEditable(false);
        txtGiaVe.setEditable(false);
        txtKM.setEditable(false);
        txtThanhTien.setEditable(false);
        txtTrangThai.setEditable(false);
        txtDieuKien.setEditable(false);
    }

    private void resetFields() {
        txtMaTraCuu.setText("");
        txtNgayDi.setText("");
        txtChuyenTau.setText("");
        txtChoNgoi.setText("");
        txtKH.setText("");
        txtGiaVe.setText("");
        txtKM.setText("");
        txtThanhTien.setText("");
        txtTrangThai.setText("");
        txtDieuKien.setText("");
    }

    // Variables declaration - do not modify
    private JPanel BoxTimVe;
    private JPanel boxChoNgoi;
    private JPanel boxChuyenTau;
    private JPanel boxDieuKien;
    private JPanel boxGiaVeKM;
    private JPanel boxInnfoVe;
    private JPanel boxKH;
    private JPanel boxThanhTien;
    private JPanel boxTraVe;
    private JPanel boxTrangThai;
    private JPanel boxXacNhan;
    private JPanel boxXoa;
    private CButton btnTraCuu;
    private CButton btnTraVe;
    private CButton btnXacNhan;
    private CButton btnXoa;
    private Box.Filler filler44;
    private Box.Filler fillerChoNgoi;
    private Box.Filler fillerChuyenTau;
    private Box.Filler fillerDieuKien;
    private Box.Filler fillerGiaVeKM;
    private Box.Filler fillerInfo;
    private Box.Filler fillerKH;
    private Box.Filler fillerNgayDI;
    private Box.Filler fillerPhiTraVe;
    private Box.Filler fillerPhiTraVe_2;
    private Box.Filler fillerPhiTraVe_3;
    private Box.Filler fillerPhiTraVe_4;
    private Box.Filler fillerTable;
    private Box.Filler fillerThanhTien;
    private Box.Filler fillerTimVe_1;
    private Box.Filler fillerTimVe_2;
    private Box.Filler fillerTraVe;
    private Box.Filler fillerTrangThai;
    private Box.Filler fillerXacNhan;
    private Box.Filler fillerXoa;
    private JComboBox<String> jcbMaVe;
    private JLabel lblChoNgoi;
    private JLabel lblChuyenTau;
    private JLabel lblDieuKien;
    private JLabel lblGiaVe;
    private JLabel lblKH;
    private JLabel lblKM;
    private JLabel lblNgayDi;
    private JLabel lblPhiTraVe;
    private JLabel lblThanhTien;
    private JLabel lblTienTra;
    private JLabel lblTitle;
    private JLabel lblTrangThai;
    private JPanel pnlInfoVe;
    private JPanel pnlLeft;
    private JPanel pnlNgayDi;
    private JPanel pnlRight;
    private JPanel pnlTop;
    private JScrollPane srlDsVe;
    private CTable tblVeTra;
    private DefaultTableModel tblModelVeTra;
    private CTextField txtChoNgoi;
    private CTextField txtChuyenTau;
    private CTextField txtDieuKien;
    private CTextField txtGiaVe;
    private CTextField txtKH;
    private CTextField txtKM;
    private CTextField txtMaTraCuu;
    private CTextField txtNgayDi;
    private CTextField txtPhiTraVe;
    private CTextField txtThanhTien;
    private CTextField txtTienTra;
    private CTextField txtTrangThai;
    private CTable tblVeDaTra;
    private DefaultTableModel tblModelVeDaTra;
    // End of variables declaration
}